devtools::load_all()
devtools::test()
noaa_df <- noaa.data %>% eq_clean_data()
noaa_df$LOCATION_NAME[1:7]
noaa_df$LOCATION_NAME == str_to_title(noaa_df$LOCATION_NAME) %>% which()
noaa_df$LOCATION_NAME == str_to_title(noaa_df$LOCATION_NAME)
expect_true(noaa_df$LOCATION_NAME == str_to_title(noaa_df$LOCATION_NAME))
which(noaa_df$LOCATION_NAME != str_to_title(noaa_df$LOCATION_NAME))
devtools::test()
devtools::test()
devtools::test()
devtools::test(filter = "testModule3.R")
devtools::test(filter = "testModule3")
devtools::test()
devtools::test_file(file = "textModule3.R")
devtools::test_file(file = "testModule3")
devtools::test_file(file = "testModule3.R")
devtools::test_file()
devtools::test_file(file = "/testthat/testModule3.R")
devtools::test_file(file = "./testthat/testModule3.R")
devtools::test_file(filter = "Module3")
devtools::test_file(filter = "[Module3]")
devtools::test_file(filter = [Module3])
devtools::test()
test_that("eq_create_label returns a proper html label", {
data <- data.frame(LOCATION_NAME = c("A", "A", NA, "A"),
EQ_PRIMARY = c(5, NA, 4, 3),
TOTAL_DEATHS = c(NA, 10, 20, 30))
expected <- c("<h3> Location: A<br> Magnitude: 5<br> Total deaths: </h3>",
"<h3> Location: A<br> Magnitude: <br> Total deaths: 10</h3>",
"<h3> Location: <br> Magnitude: 4<br> Total deaths: 20</h3>",
"<h3> Location: A<br> Magnitude: 3<br> Total deaths: 30</h3>")
expect_equal(eq_create_label(data), expected)
})
test_that("eq_create_label returns a proper html label", {
data <- data.frame(LOCATION_NAME = c("A", "A", NA, "A"),
EQ_PRIMARY = c(5, NA, 4, 3),
TOTAL_DEATHS = c(NA, 10, 20, 30))
expected <- c("<h3> Location: A<br> Magnitude: 5<br> Total deaths: </h3>",
"<h3> Location: A<br> Magnitude: <br> Total deaths: 10</h3>",
"<h3> Location: <br> Magnitude: 4<br> Total deaths: 20</h3>",
"<h3> Location: A<br> Magnitude: 3<br> Total deaths: 30</h3>")
eq_create_label(data)
expect_equal(eq_create_label(data), expected)
})
test_that("eq_create_label returns a proper html label", {
data <- data.frame(LOCATION_NAME = c("A", "A", NA, "A"),
EQ_PRIMARY = c(5, NA, 4, 3),
TOTAL_DEATHS = c(NA, 10, 20, 30))
expected <- c("<h3> Location: A<br> Magnitude: 5<br> Total deaths: </h3>",
"<h3> Location: A<br> Magnitude: <br> Total deaths: 10</h3>",
"<h3> Location: <br> Magnitude: 4<br> Total deaths: 20</h3>",
"<h3> Location: A<br> Magnitude: 3<br> Total deaths: 30</h3>")
print(eq_create_label(data))
expect_equal(eq_create_label(data), expected)
})
test_that("eq_create_label returns a proper html label", {
data <- data.frame(LOCATION_NAME = c("A", "A", NA, "A"),
EQ_PRIMARY = c(5, NA, 4, 3),
TOTAL_DEATHS = c(NA, 10, 20, 30))
expected <- c("<h3> Location: A<br>Magnitude: 5<br>Total deaths: </h3>",
"<h3> Location: A<br>Magnitude: <br>Total deaths: 10</h3>",
"<h3> Location: <br>Magnitude: 4<br>Total deaths: 20</h3>",
"<h3> Location: A<br>Magnitude: 3<br>Total deaths: 30</h3>")
print(eq_create_label(data))
expect_equal(eq_create_label(data), expected)
})
test_that("eq_create_label returns a proper html label", {
data <- data.frame(LOCATION_NAME = c("A", "A", NA, "A"),
EQ_PRIMARY = c(5, NA, 4, 3),
TOTAL_DEATHS = c(NA, 10, 20, 30))
expected <- c("<h3> Location: A<br>Magnitude: 5<br>Total deaths: NA</h3>",
"<h3> Location: A<br>Magnitude: NA<br>Total deaths: 10</h3>",
"<h3> Location: NA<br>Magnitude: 4<br>Total deaths: 20</h3>",
"<h3> Location: A<br>Magnitude: 3<br>Total deaths: 30</h3>")
print(eq_create_label(data))
expect_equal(eq_create_label(data), expected)
})
devtools::test()
library(Capstone)
install.packages("devtools")
devtools::load_all()
install.packages("devtools")
install.packages("devtools", dependencies = FALSE)
library(devtools)
install.packages("callr", dependencies = FALSE)
install.packages("callr", dependencies = FALSE, type = "binary")
library(devtools)
install.packages("ps")
library(devtools)
devtools::load_all()
library(Capstone)
library(dplyr)
library(ggplot2)
df <- Capstone::noaa.data %>% Capstone::eq_clean_data()
df2 <- df %>%
dplyr::select(date, EQ_MAG_MW, DEATHS, COUNTRY, LOCATION_NAME) %>% dplyr::filter(!is.na(EQ_MAG_MW) & !is.na(DEATHS))
# df2 %>%
#   dplyr::filter(COUNTRY %in% c("INDONESIA", "CHINA")) %>%
#   ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,
#              group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
#   geom_timeline(xmin = xmindate) +
#   geom_timeline_label(n_max = 10, xmin = xmindate) +
#   theme_classic()+ labs(y = "") +
#   theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
xmindate <- lubridate::ymd("2000-01-01")
xmaxdate <- lubridate::ymd("2020-01-01")
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "INDONESIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,
group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
#######################
library(leaflet)
library(OpenStreetMap)
library(htmltools)
df.map <- df %>%
dplyr::select(date, EQ_MAG_MW, COUNTRY, LATITUDE, LONGITUDE, TOTAL_DEATHS, LOCATION_NAME, EQ_PRIMARY) %>%
dplyr::filter(!is.na(EQ_PRIMARY) & !is.na(TOTAL_DEATHS))
df.map %>% dplyr::filter(COUNTRY %in% c("INDONESIA", "CHINA")) %>%
ggplot(aes(x = LONGITUDE, y = LATITUDE, color = COUNTRY, size = EQ_PRIMARY)) +
geom_point()
# Create a palette that maps factor levels to colors
# pal <- colorFactor(c("navy", "red", "green"), domain = c("INDONESIA", "CHINA", "PHILIPPINES"))
#
# m1 <- df.map%>% dplyr::filter(COUNTRY %in% c("INDONESIA", "CHINA", "PHILIPPINES")) %>%
#   dplyr::mutate(my_popups = paste0("<h4>", date, "</h4><h3>", LOCATION_NAME, "</h3>")) %>%
#   leaflet() %>% leaflet::addTiles() %>%
#   leaflet::addCircleMarkers(lat = ~LATITUDE,
#                             lng = ~LONGITUDE,
#                             color = ~pal(COUNTRY),
#                             stroke = FALSE,
#                             fillOpacity = 0.5,
#                             radius = ~EQ_PRIMARY,
#                             popup = ~my_popups)
# m2 <- Capstone::eq_map(df.map %>% dplyr::filter(COUNTRY %in% c("INDONESIA", "CHINA")),
#                        annot_col = c("LATITUDE", "LONG", "LOCATION_NAME", "Date")
#                        )
m2 <- df.map %>% dplyr::filter(COUNTRY %in% "MEXICO" & lubridate::year(date) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
m2
install.packages("openStreetMap")
y
install.packages("OpenStreetMap")
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "INDONESIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,
group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
library(leaflet)
library(OpenStreetMap)
library(htmltools)
df.map <- df %>%
dplyr::select(date, EQ_MAG_MW, COUNTRY, LATITUDE, LONGITUDE, TOTAL_DEATHS, LOCATION_NAME, EQ_PRIMARY) %>%
dplyr::filter(!is.na(EQ_PRIMARY) & !is.na(TOTAL_DEATHS))
df.map %>% dplyr::filter(COUNTRY %in% c("INDONESIA", "CHINA")) %>%
ggplot(aes(x = LONGITUDE, y = LATITUDE, color = COUNTRY, size = EQ_PRIMARY)) +
geom_point()
m2 <- df.map %>% dplyr::filter(COUNTRY %in% "MEXICO" & lubridate::year(date) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
m2
m1 <- df.map %>% dplyr::filter(COUNTRY %in% c("INDONESIA", "CHINA")) %>%
ggplot(aes(x = LONGITUDE, y = LATITUDE, color = COUNTRY, size = EQ_PRIMARY)) +
geom_point()
m1
m2 <- df.map %>% dplyr::filter(COUNTRY %in% c("INDONESIA", "CHINA") & lubridate::year(date) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
m2
testthat::test_dir()
testthat::test_package()
testthat::test_package("Capstone")
testthat::test_dir(path = ".")
getwd()
testthat::test_dir(path = "./tests/testthat/")
library(testthat)
library(Capstone)
test_check("Capstone")
library(testthat)
library(Capstone)
testthat::test_dir(path = "./tests/testthat/")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(devtools)
devtools::load_all()
library(Capstone)
library(dplyr)
library(ggplot2)
library(readr)
library(grid)
library(devtools)
devtools::load_all()
library(Capstone)
library(dplyr)
library(ggplot2)
library(grid)
library(lubridate)
library(leaflet)
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "INDONESIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "INDONESIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate) +
# geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
xmindate <- ymd("2000-01-01")
xmaxdate <- ymd("2020-01-01")
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "INDONESIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate) +
# geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
xmindate <- ymd("2000-01-01")
xmaxdate <- ymd("2010-01-01")
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "INDONESIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
# geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
df$LOCATION_NAME[1:10]
df$COUNTRY %>% unique()
df$COUNTRY %>% unique() %>% sort()
xmindate <- ymd("1990-01-01")
xmaxdate <- ymd("2000-01-01")
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "CANADA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "CANADA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
# geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
xmaxdate <- ymd("2020-01-01")
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "CANADA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
# geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "CANADA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(devtools)
devtools::load_all()
library(Capstone)
library(dplyr)
library(ggplot2)
library(grid)
library(lubridate)
library(leaflet)
df <- Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::select(date, EQ_MAG_MW, DEATHS, COUNTRY, LOCATION_NAME) %>%
dplyr::filter(!is.na(EQ_MAG_MW) & !is.na(DEATHS))
df %>%
head(n = 10) %>% print()
xmindate <- ymd("1990-01-01")
xmaxdate <- ymd("2020-01-01")
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "CANADA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
y = 1:5
unit(y)
unit(y, "npc")
unit(c(y,y), "npc")
devtools::load_all()
xmindate <- ymd("1990-01-01")
xmaxdate <- ymd("2020-01-01")
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "CANADA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
devtools::load_all()
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "CANADA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
df %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "CANADA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
devtools::load_all()
df %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "CANADA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
View(df)
df %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "CANADA", "COLOMBIA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
df %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "COLOMBIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
devtools::load_all()
df %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "COLOMBIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
devtools::load_all()
df %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "COLOMBIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
devtools::load_all()
df %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "COLOMBIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
df %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "COLOMBIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
# geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
devtools::load_all()
df %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "COLOMBIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
# geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
df %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "COLOMBIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
devtools::load_all()
devtools::load_all()
devtools::load_all()
df %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "COLOMBIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
df %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "COLOMBIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
devtools::load_all()
df %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "COLOMBIA", "CHINA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
Capstone::noaa.data %>%
Capstone::eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA")) %>%
ggplot(aes(x = date, y = COUNTRY, label = LOCATION_NAME,group = COUNTRY, size = EQ_MAG_MW, fill = DEATHS/1000)) +
geom_timeline(xmin = xmindate, xmax = xmaxdate) +
geom_timeline_label(n_max = 10, xmin = xmindate) +
theme_classic()+ labs(y = "") +
theme(legend.position = "bottom", axis.line.y = element_blank(), axis.ticks.y= element_blank())
eq_map(df, annot_col = "LOCATION_NAME")
df.map <- df %>%
dplyr::select(date, EQ_MAG_MW, COUNTRY, LATITUDE, LONGITUDE, TOTAL_DEATHS, LOCATION_NAME, EQ_PRIMARY) %>%
dplyr::filter(!is.na(EQ_PRIMARY) & !is.na(TOTAL_DEATHS))
df <- Capstone::noaa.data %>% Capstone::eq_clean_data()
df %>%
dplyr::select(date, EQ_MAG_MW, DEATHS, COUNTRY, LOCATION_NAME) %>%
dplyr::filter(!is.na(EQ_MAG_MW) & !is.na(DEATHS)) %>%
head(n = 10) %>%
print()
eq_map(df.map, annot_col = "LOCATION_NAME")
df %>%
dplyr::select(date, EQ_MAG_MW, COUNTRY, LATITUDE, LONGITUDE, TOTAL_DEATHS, LOCATION_NAME, EQ_PRIMARY) %>%
dplyr::filter(!is.na(EQ_PRIMARY) & !is.na(TOTAL_DEATHS)) %>%
eq_map()
df %>%
dplyr::select(date, EQ_MAG_MW, COUNTRY, LATITUDE, LONGITUDE, TOTAL_DEATHS, LOCATION_NAME, EQ_PRIMARY) %>%
dplyr::filter(!is.na(EQ_PRIMARY) & !is.na(TOTAL_DEATHS)) %>%
eq_map(data = .)
df %>%
dplyr::select(date, EQ_MAG_MW, COUNTRY, LATITUDE, LONGITUDE, TOTAL_DEATHS, LOCATION_NAME, EQ_PRIMARY) %>%
dplyr::filter(!is.na(EQ_PRIMARY) & !is.na(TOTAL_DEATHS)) %>%
eq_map(data = ., annot_col = "LOCATION")
devtools::load_all()
df %>%
dplyr::select(date, EQ_MAG_MW, COUNTRY, LATITUDE, LONGITUDE, TOTAL_DEATHS, LOCATION_NAME, EQ_PRIMARY) %>%
dplyr::filter(!is.na(EQ_PRIMARY) & !is.na(TOTAL_DEATHS)) %>%
eq_map(data = ., annot_col = "LOCATION")
df %>%
dplyr::select(date, EQ_MAG_MW, COUNTRY, LATITUDE, LONGITUDE, TOTAL_DEATHS, LOCATION_NAME, EQ_PRIMARY) %>%
dplyr::filter(!is.na(EQ_PRIMARY) & !is.na(TOTAL_DEATHS)) %>%
eq_map(data = ., annot_col = "LOCATION_NAME")
devtools::load_all()
df %>%
dplyr::select(date, EQ_MAG_MW, COUNTRY, LATITUDE, LONGITUDE, TOTAL_DEATHS, LOCATION_NAME, EQ_PRIMARY) %>%
dplyr::filter(!is.na(EQ_PRIMARY) & !is.na(TOTAL_DEATHS)) %>%
eq_map(data = ., annot_col = "LOCATION_NAME")
df %>%
dplyr::select(date, EQ_MAG_MW, COUNTRY, LATITUDE, LONGITUDE, TOTAL_DEATHS, LOCATION_NAME, EQ_PRIMARY) %>%
dplyr::filter(!is.na(EQ_PRIMARY) & !is.na(TOTAL_DEATHS)) %>%
eq_map(data = ., annot_col = "LOCATI")
df %>%
dplyr::select(date, EQ_MAG_MW, COUNTRY, LATITUDE, LONGITUDE, TOTAL_DEATHS, LOCATION_NAME, EQ_PRIMARY) %>%
dplyr::filter(!is.na(EQ_PRIMARY) & !is.na(TOTAL_DEATHS)) %>%
eq_map(data = ., annot_col = "LOCATION_NAME")
df %>%
dplyr::select(date, EQ_MAG_MW, COUNTRY, LATITUDE, LONGITUDE, TOTAL_DEATHS, LOCATION_NAME, EQ_PRIMARY) %>%
dplyr::filter(!is.na(EQ_PRIMARY) & !is.na(TOTAL_DEATHS)) %>%
dplyr::filter(COUNTRY %in% c("MEXICO", "USA", "CANADA")) %>%
eq_map(data = ., annot_col = "LOCATION_NAME")
eq_create_label(df)
popup_text <- eq_create_label(df)
eq_map(df, annot_col = popup_text)
eq_map(df, annot_col = "popup_text")
m2 <- df.map %>% dplyr::filter(COUNTRY %in% c("INDONESIA", "CHINA") & lubridate::year(date) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
m2
df %>% dplyr::filter(COUNTRY %in% c("INDONESIA", "CHINA") & lubridate::year(date) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
popup_text <- eq_create_label(df)
df %>% dplyr::filter(COUNTRY %in% c("INDONESIA", "CHINA") & lubridate::year(date) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
library(devtools)
install.packages("devtools")
